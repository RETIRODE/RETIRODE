/*
 * retirode_rmp.h
 *
 *  Created on: Apr 4, 2021
 *      Author: Trojan Martin
 */

/**
 * @file retirode_rmp.h
 *
 * @addtogroup RETIRODE_RMP
 * @{
 *
 * @addtogroup RETIRODE_RMP Range finder measurement library
 * @{
 *
 * @brief
 * Range finder Measurement Processor.
 * UART interface library for ToF data measurement.
 *
 */

#ifndef INCLUDE_RETIRODE_RMP_H_
#define INCLUDE_RETIRODE_RMP_H_

/* ----------------------------------------------------------------------------
 * If building with a C++ compiler, make all of the definitions in this header
 * have a C binding.
 * ------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C"
{
#endif    /* ifdef __cplusplus */

/* ----------------------------------------------------------------------------
 * Include files
 * --------------------------------------------------------------------------*/

#include <RTE_Device.h>
#include <rsl10.h>
#include <USART_RSLxx.h>
#include <stdio.h>
#include <math.h>

/* ----------------------------------------------------------------------------
 * Define & Type declaration
 * ------------------------------------------------------------------------- */
#define RETIRODE_RMP_REVISION_REGISTER						      'R'
#define RETIRODE_RMP_MAIN_CONFIG_REGISTER                 		  'C'
#define RETIRODE_RMP_LASER_PULSE_WIDTH_REGISTER                   'W'
#define RETIRODE_RMP_TRIGGER_PERIOD_HIGH_BYTE_REGISTER            'P'
#define RETIRODE_RMP_TRIGGER_PERIOD_HIGH_LOW_REGISTER             'p'
#define RETIRODE_RMP_PULSE_COUNT_REGISTER		                  'N'
#define RETIRODE_RMP_DCD_CONFIG_REGISTER		                  'D'
#define RETIRODE_RMP_TARGET_LASER_VOLTAGE_REGISTER                'L'
#define RETIRODE_RMP_ACTUAL_LASER_VOLTAGE_REGISTER                'l'
#define RETIRODE_RMP_TARGET_BIAS_VOLTAGE_REGISTER                 'B'
#define RETIRODE_RMP_ACTUAL_BIAS_VOLTAGE_REGISTER                 'b'

#define RETIRODE_RMP_DATA_RECEIVED_BUFFER_SIZE  				  200 * 4
#define RETIRODE_RMP_MAX_DATA_CHUNK_SIZE						  50




typedef enum RETIRODE_RMP_State_t
{
    /**
     * LIDAR is completely powered off.
     * State transitions:
     * * SMARTSHOT_ISP_STATE_IDLE - After receiving Initialize command.
     */
	RETIRODE_RMP_STATE_SHUTDOWN,

	/**
	 * LIDAR is ready and waiting for application commands.
	 *
	 * State transitions:
	 * * RETIRODE_RMP_STATE_QUERY - After receiving CONFIGURE command.
	 * * RETIRODE_RMP_STATE_DATA_PROCESSING - After receiving MEASURE command.
	 */
	RETIRODE_RMP_STATE_IDLE,

	/**
	 * Sends given calibrate value command to LIDAR
	 *
	 * State transitions:
	 * * After successfful calibration, send Measure command .
	 */
	RETIRODE_RMP_STATE_CALIBRATE,
	/**
	 * Sends SETTING command to LIDAR
	 *
	 * State transitions:
	 * * RETIRODE_RMP_STATE_IDLE - After successfuly sending configuration command to LIDAR.
	 */
	RETIRODE_RMP_STATE_SETTING,
	/**
	 * Sends query command to LIDAR
	 *
	 * State transitions:
	 * * RETIRODE_RMP_STATE_QUERY_RESPONSE - After sending QUERY command.
	 */
	RETIRODE_RMP_STATE_QUERY,
	/**
	 * Handles query response from LIDAR
	 *
	 * State transitions:
	 * * SMARTSHOT_ISP_STATE_IDLE - After processing QUERY command.
	 */
	RETIRODE_RMP_STATE_QUERY_RESPONSE,

	/**
	 * Handles sending measurement data to LIDAR
	 *
	 * State transitions:
	 * * RETIRODE_RMP_STATE_MEASURE_DATA_PROCESSING - After data from LIDAR.
	*/
	RETIRODE_RMP_STATE_MEASURE,
	/**
	 * Handles received raw data from LIDAR
	 *
	 * State transitions:
	 * * RETIRODE_RMP_STATE_MEASURE - When more data is required.
	 * * RETIRODE_RMP_STATE_MEASUREMENT_DATA_READY - After RECEIVING all data from LIDAR.
	 */
	RETIRODE_RMP_STATE_MEASURE_DATA_PROCESSING,

	/**
	 * Notifies application about
	 *
	 * State transitions:
	 * * RETIRODE_RMP_STATE_IDLE - After NOTIFYING application.
	 */
	RETIRODE_RMP_STATE_MEASUREMENT_DATA_READY,

	RETIRODE_RMP_STATE_MAX
} RETIRODE_RMP_State_t;

/**
 * Calibration modes, that are received from the host
 */
typedef enum RETIRODE_RMP_Calibration_t
{
	RETIRODE_RMP_CALIBRATION_0ns = 1,
	RETIRODE_RMP_CALIBRATION_62p5ns,
	RETIRODE_RMP_CALIBRATION_125ns,
	RETIRODE_RMP_CALIBRATION_DONE
} RETIRODE_RMP_Calibration_t;


/**
 * List of event generated by RETIRODE_RMP library that need to be processed
 * by the application
 */
typedef enum RETIRODE_RMP_Event_t
{
	RETIRODE_RMP_EVENT_ERROR,
	RETIRODE_RMP_EVENT_READY,
	RETIRODE_RMP_EVENT_MEASUREMENT_DATA_READY,
	RETIRODE_RMP_EVENT_CALIBRATION_DATA_READY,
	RETIRODE_RMP_EVENT_QUERY_RESPONSE_READY
} RETIRODE_RMP_Event_t;


/** List of error codes returned by RMP library calls. */
typedef enum RETIRODE_RMP_Err_t
{
    /** Operation completed without errors. */
	RETIRODE_RMP_ERR_NO_ERROR,

    /** Transaction error on UART C bus while communicating with LIDAR. */
	RETIRODE_RMP_ERR_UART_ERROR,

    /** Raised when invalid non compatible with current implementation of RMP. */
	RETIRODE_RMP_ERR_LIDAR,
} RETIRODE_RMP_Err_t;


/** Additional parameters for @ref RETIRODE_RMP_EVENT_MEASUREMENT_DATA_READY message. */
typedef struct RETIRODE_RMP_Data_t
{
    /** Number of data bytes contained in #data */
    uint32_t size;

    /** Contains chunk of measured data. */
    uint32_t data[RETIRODE_RMP_MAX_DATA_CHUNK_SIZE];
} RETIRODE_RMP_Data_t;

/** Additional parameters for @ref RETIRODE_RMP_EVENT_QUERY_RESPONSE_READY message. */
typedef struct RETIRODE_RMP_CalibrationDataReady_response_t
{
    /** Response from RF */
	RETIRODE_RMP_Calibration_t cal;

	uint32_t value;

} RETIRODE_RMP_CalibrationDataReady_response_t;

/** Additional parameters for @ref RETIRODE_RMP_EVENT_QUERY_RESPONSE_READY message. */
typedef struct RETIRODE_RMP_Query_response_t
{
    /**Register name */
	char reg;

	/** Current value in the register */
	uint32_t value;

} RETIRODE_RMP_Query_response_t;

/** Function prototype for RETIRODE_RMP library event handler.
 *
 * @param event
 * Event type to be processed.
 *
 * @param p_param
 * Pointer to optional event specific parameter structure.
 */
typedef void (*RETIRODE_RMP_EventHandler_t)(RETIRODE_RMP_Event_t event,
        const void *p_param);

/** Additional parameters for @ref SMARTSHOT_ISP_ERROR_IND message. */
typedef struct RETIRODE_RMP_ErrorEvent_t
{
    /** ID of state in which the error occurred. */
	RETIRODE_RMP_State_t state;

    /** Error code of the error. */
	RETIRODE_RMP_Err_t error;

} RETIRODE_RMP_ErrorEvent_t;

/**
 * Handler that must be called from the event handler routine of the UART
 * CMSIS-Driver.
 *
 * @param event
 * Event passed to the CMSIS-Driver event handler.
 */
void RETIRODE_RMP_UARTEventHandler(uint32_t event);

/**
 * Initializes internal state of library.
 *
 * @param uart
 * Pointer to initialized and powered up instance of USART CMSIS-Driver that will
 * be used to communicate with Range Finder.
 *
 * @param handler
 * Pointer to callbacks function that will be used to inform application of
 * events generated by the library.
 *
 * @return
 * ARM_DRIVER_OK - On success. <br>
 * ARM_DRIVER_ERROR - On invalid argument.
 */
int32_t RETIRODE_RMP_Initialize(ARM_DRIVER_USART *uart, RETIRODE_RMP_EventHandler_t handler);

/**
 * Main routine of the library that must be periodically called from application
 * main loop.
 *
 * All communication and processing related to USART is being handled from within
 * this routine.
 */
bool RETIRODE_RMP_MainLoop(void);

/**
 * Issue command to the library to power up ISP.
 *
 * This function just sets appropriate flags to start the process.
 * All actions are taken from RETIRODE_RMP_MainLoop.
 */
void RETIRODE_RMP_PowerUpCommand(void);

/**
 * Issue command to the library to measure data.
 *
 * This function just sets appropriate flags to start the process.
 * All actions are taken from RETIRODE_RMP_MainLoop.
 *
 * *@param measure_size
 * The number of measurements that the library should take.
 */
void RETIRODE_RMP_MeasureCommand(uint32_t measure_size);

/**
 * Issue command to the library to get current value from register.
 *
 * This function just sets appropriate flags to start the process.
 * All actions are taken from RETIRODE_RMP_MainLoop.
 *
 * @param reg
 * The name of the registry whose value is to be obtained.
 */
void RETIRODE_RMP_QueryCommand(char reg);

/**
 * Issue command to the library to get calibration value.
 *
 * This function just sets appropriate flags to start the process.
 * All actions are taken from RETIRODE_RMP_MainLoop.
 *
 * @param calibrate
 * Calibration for which the calibration value is to be obtained.
 * Possible calibration values ​​are defined in @ref RETIRODE_RMP_Calibration_t
 */
void RETIRODE_RMP_CalibrateCommand(uint8_t calibrate);

/**
 * Issue command to the library to reset RF and library state.
 *
 * This function just sets appropriate flags to start the process.
 * All actions are taken from RETIRODE_RMP_MainLoop.
 *
 * Immediately reset command is issued to RF.
 * All pending actions of the library are cancelled.
 */
void RETIRODE_RMP_SoftwareResetCommand();

/**
 * Issue command to the library to enable/disable laser power voltage.
 *
 * This function just sets appropriate flags to start the process.
 * All actions are taken from RETIRODE_RMP_MainLoop.
 *
 * @param enabled
 * Determines if power voltage should be enabled or disabled
 */
void RETIRODE_RMP_SetLaserPowerEnabledCommand(bool enabled);

/**
 * Issue command to the library to enable/disable SiMP bias power voltage.
 *
 * This function just sets appropriate flags to start the process.
 * All actions are taken from RETIRODE_RMP_MainLoop.
 *
 * @param enabled
 * Determines if power voltage should be enabled or disabled
 */
void RETIRODE_RMP_SetPowerBiasEnabledCommand(bool enabled);

/**
 * Issue command to the library to set Laser power target voltage.
 *
 * This function just sets appropriate flags to start the process.
 * All actions are taken from RETIRODE_RMP_MainLoop.
 *
 * @param voltage
 * Voltage to be set
 */
void RETIRODE_RMP_SetLaserPowerTargetVoltateCommand(uint32_t voltage);

/**
 * Issue command to the library to set SiMP bias power target voltage.
 *
 * This function just sets appropriate flags to start the process.
 * All actions are taken from RETIRODE_RMP_MainLoop.
 *
 * @param voltage
 * Voltage to be set
 */
void RETIRODE_RMP_SetPowerBiasTargetVoltateCommand(uint32_t voltage);

/**
 * Issue command to the library to set pulse count of the measurement.
 *
 * This function just sets appropriate flags to start the process.
 * All actions are taken from RETIRODE_RMP_MainLoop.
 *
 * @param count
 * Max possible value is 255
 */
void RETIRODE_RMP_SetPulseCountCommand(uint8_t count);

/**
 * Issue command to the library to set new trigger period.
 *
 * This function just sets appropriate flags to start the process.
 * All actions are taken from RETIRODE_RMP_MainLoop.
 *
 * @param newPeriod
 * New trigger period
 */
void RETIRODE_RMP_SetTriggerPeriodCommand(float newPeriod);

/* ----------------------------------------------------------------------------
 * Close the 'extern "C"' block
 * ------------------------------------------------------------------------- */
#ifdef __cplusplus
}
#endif    /* ifdef __cplusplus */

#endif /* INCLUDE_RETIRODE_RMP_H_ */

/** @} */
/** @} */

/* ----------------------------------------------------------------------------
 * End of File
 * ------------------------------------------------------------------------- */
