/*
 * retirode_lmp.h
 *
 *  Created on: Apr 4, 2021
 *      Author: marti
 */

#ifndef INCLUDE_RETIRODE_RMP_H_
#define INCLUDE_RETIRODE_RMP_H_

/* ----------------------------------------------------------------------------
 * If building with a C++ compiler, make all of the definitions in this header
 * have a C binding.
 * ------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C"
{
#endif    /* ifdef __cplusplus */

/* ----------------------------------------------------------------------------
 * Include files
 * --------------------------------------------------------------------------*/

#include <RTE_Device.h>
#include <rsl10.h>
#include <USART_RSLxx.h>


/* ----------------------------------------------------------------------------
 * Define & Type declaration
 * ------------------------------------------------------------------------- */
#define R_REGISTER                 'R'
#define C_REGISTER                 'C'
#define W_REGISTER                 'W'
#define P_REGISTER                 'P'
#define p_REGISTER                 'p'
#define N_REGISTER                 'N'
#define D_REGISTER                 'D'
#define L_REGISTER                 'L'
#define B_REGISTER                 'B'
#define I_REGISTER                 'I'
#define b_REGISTER                 'b'

#define RETIRODE_RMP_DATA_RECEIVED_BUFFER_SIZE  	2000
#define RETIRODE_RMP_MAX_DATA_CHUNK_SIZE			64

typedef enum RETIRODE_RMP_State_t
{
    /**
     * LIDAR is completely powered off.
     * State transitions:
     * * SMARTSHOT_ISP_STATE_POWER_UP - After receiving power up command.
     */
	RETIRODE_RMP_STATE_SHUTDOWN,

    /**
     * LIDAR is powering up.
     * Turning ON both power supplies
     * State transitions:
     * * SMARTSHOT_ISP_STATE_IDLE - After successful power-up operation.
     */
	RETIRODE_RMP_STATE_POWER_UP,

	/**
	 * LIDAR is ready and waiting for application commands.
	 *
	 * State transitions:
	 * * RETIRODE_RMP_STATE_QUERY - After receiving CONFIGURE command.
	 * * RETIRODE_RMP_STATE_DATA_PROCESSING - After receiving MEASURE command.
	 */
	RETIRODE_RMP_STATE_IDLE,

	/**
	 * Sends SETTING command to LIDAR
	 *
	 * State transitions:
	 * * RETIRODE_RMP_STATE_IDLE - After successfuly sending configuration command to LIDAR.
	 */
	RETIRODE_RMP_STATE_SETTING,
	/**
	 * Sends query command to LIDAR
	 *
	 * State transitions:
	 * * RETIRODE_RMP_STATE_QUERY_RESPONSE - After sending QUERY command.
	 */
	RETIRODE_RMP_STATE_QUERY,
	/**
	 * Handles query response from LIDAR
	 *
	 * State transitions:
	 * * SMARTSHOT_ISP_STATE_IDLE - After processing QUERY command.
	 */
	RETIRODE_RMP_STATE_QUERY_RESPONSE,

	/**
	 * Handles sending measurement data to LIDAR
	 *
	 * State transitions:
	 * * RETIRODE_RMP_STATE_MEASURE_DATA_PROCESSING - After data from LIDAR.
	*/
	RETIRODE_RMP_STATE_MEASURE,
	/**
	 * Handles received raw data from LIDAR
	 *
	 * State transitions:
	 * * RETIRODE_RMP_STATE_MEASURE - When more data is required.
	 * * RETIRODE_RMP_STATE_MEASUREMENT_DATA_READY - After RECEIVING all data from LIDAR.
	 */
	RETIRODE_RMP_STATE_MEASURE_DATA_PROCESSING,

	/**
	 * Notifies application about
	 *
	 * State transitions:
	 * * RETIRODE_RMP_STATE_IDLE - After NOTIFYING application.
	 */
	RETIRODE_RMP_STATE_MEASUREMENT_DATA_READY,

	RETIRODE_RMP_STATE_MAX
} RETIRODE_RMP_State_t;


/**
 * List of event generated by RETIRODE_RMP library that need to be processed
 * by the application
 */
typedef enum RETIRODE_RMP_Event_t
{
	RETIRODE_RMP_EVENT_ERROR,
	RETIRODE_RMP_EVENT_READY,
	RETIRODE_RMP_EVENT_MEASUREMENT_DATA_READY,
	RETIRODE_RMP_EVENT_QUERY_RESPONSE_READY
} RETIRODE_RMP_Event_t;


/** List of error codes returned by ISP library calls. */
typedef enum RETIRODE_RMP_Err_t
{
    /** Operation completed without errors. */
	RETIRODE_RMP_ERR_NO_ERROR,

    /** Transaction error on UART C bus while communicating with LIDAR. */
	RETIRODE_RMP_ERR_UART_ERROR,

    /** Unused. */
	RETIRODE_RMP_ERR_ISP_TIMEOUT,

    /** Raised when invalid non compatible with current implementation of RMP. */
	RETIRODE_RMP_ERR_LIDAR,
} RETIRODE_RMP_Err_t;


/** Additional parameters for @ref RETIRODE_RMP_EVENT_MEASUREMENT_DATA_READY message. */
typedef struct RETIRODE_RMP_Data_t
{
    /** Number of data bytes contained in #data */
    uint32_t size;

    /** Contains chunk of image data read from ISP processor. */
    uint8_t data[RETIRODE_RMP_MAX_DATA_CHUNK_SIZE];
} RETIRODE_RMP_Data_t;

/** Additional parameters for @ref RETIRODE_RMP_EVENT_QUERY_RESPONSE_READY message. */
typedef struct RETIRODE_RMP_Query_response_t
{
    /** Response from RF */
    char response[4];
} RETIRODE_RMP_Query_response_t;

/** Function prototype for RETIRODE_RMP library event handler.
 *
 * @param event
 * Event type to be processed.
 *
 * @param p_param
 * Pointer to optional event specific parameter structure.
 */
typedef void (*RETIRODE_RMP_EventHandler_t)(RETIRODE_RMP_Event_t event,
        const void *p_param);

/** Additional parameters for @ref SMARTSHOT_ISP_ERROR_IND message. */
typedef struct RETIRODE_RMP_ErrorEvent_t
{
    /** ID of state in which the error occurred. */
	RETIRODE_RMP_State_t state;

    /** Error code of the error. */
	RETIRODE_RMP_Err_t error;

} RETIRODE_RMP_ErrorEvent_t;

typedef enum RETIRODE_RMP_ReadyReason_t
{
    /**
     * ISP is ready to capture next image due to completion of power up
     * sequence.
     */
	RETIRODE_RMP_READY_POWER_UP,

    /**
     * ISP is ready to capture next image after completion of data transfer
     * of previous capture.
     */
	RETIRODE_RMP_READY_DATA_TRANSFER_COMPLETE,
} RETIRODE_RMP_ReadyReason_t;

/**
 * Handler that must be called from the event handler routine of the UART
 * CMSIS-Driver.
 *
 * @param event
 * Event passed to the CMSIS-Driver event handler.
 */
void RETIRODE_RMP_UARTEventHandler(uint32_t event);


int32_t RETIRODE_RMP_Initialize(ARM_DRIVER_USART *uart, RETIRODE_RMP_EventHandler_t handler);

bool RETIRODE_RMP_MainLoop(void);

void RETIRODE_RMP_PowerUpCommand(void);

void RETIRODE_RMP_MeasureCommand(uint32_t measure_size);

void RETIRODE_RMP_QueryCommand(char reg);

void RETIRODE_RMP_SettingCommand(char reg, char char1, char char2);

/* ----------------------------------------------------------------------------
 * Close the 'extern "C"' block
 * ------------------------------------------------------------------------- */
#ifdef __cplusplus
}
#endif    /* ifdef __cplusplus */

#endif /* INCLUDE_RETIRODE_RMP_H_ */
